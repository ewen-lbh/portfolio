package pages

import "github.com/ortfo/db"
import "github.com/ewen-lbh/portfolio/shared"
import "fmt"
import "github.com/ewen-lbh/portfolio/components"
import "time"

func gridAreas(layout ortfodb.Layout) shared.Selectors {
	var areas []string
	for _, row := range layout.Normalize() {
		var rowAreas []string
		for _, cell := range row {
			rowAreas = append(rowAreas, string("_"+cell))
		}
		areas = append(areas, "'"+strings.Join(rowAreas, " ")+"'")
	}

	declarations := make(shared.Selectors)

	declarations["section.content"] = shared.Declarations{
		"grid-template-areas": strings.Join(areas, " "),
	}

	for _, id := range layout.BlockIDs() {
		declarations["[data-block='"+id+"']"] = shared.Declarations{
			"grid-area": fmt.Sprintf("_%s", id),
		}
	}

	return declarations
}

func colorVariables(work ortfodb.AnalyzedWork, language string) shared.Selectors {
	palette := work.Colors(language)
	return shared.Selectors{
		"body": {
			"--primary":        shared.Color(palette.Primary),
			"--primary-text":   shared.ReadableOn(palette.Primary),
			"--secondary":      shared.Color(palette.Secondary),
			"--secondary-text": shared.ReadableOn(palette.Secondary),
			"--tertiary":       shared.Color(palette.Tertiary),
			"--tertiary-text":  shared.ReadableOn(palette.Tertiary),
		},
	}
}

func MediaSrc(block ortfodb.Media) string {
	thumb := shared.Media(block.Thumbnails.Closest(1000))
	if thumb != "" {
		return thumb
	}
	return shared.Media(block.DistSource)
}

templ ParagraphBlock(block ortfodb.Paragraph) {
	@shared.HTML(block.Content)
}

func GeneralContentType(contentType string) string {
	if strings.HasPrefix(contentType, "image/") {
		return "image"
	} else if strings.HasPrefix(contentType, "video/") {
		return "video"
	} else if strings.HasPrefix(contentType, "audio/") {
		return "audio"
	} else {
		return "other"
	}
}

script UnsupportedMediaTypeConsoleError(msg string) {
	console.error(`Unsupported media type: ${ msg }`)
}

templ MediaBlock(block ortfodb.Media, id string) {
	<figure class={ figureStyles() }>
		if block.Caption != "" {
			<figcaption class={ figureCaptionStyles() }>{ block.Caption }</figcaption>
		}
		switch GeneralContentType(block.ContentType) {
			case "image":
				<a class={ figureLinkStyles() } href={ templ.URL(shared.Media(block.DistSource)) }>
					<img
						class={ imageStyles() }
						src={ MediaSrc(block) }
						srcset={ shared.MediaSrcSet(block) }
						alt={ block.Alt }
						height={ fmt.Sprintf("%dpx", block.Dimensions.Height) }
						width={ fmt.Sprintf("%dpx", block.Dimensions.Width) }
					/>
				</a>
			case "video":
				<video
					class={ imageStyles() }
					loop?={ block.Attributes.Loop }
					controls?={ block.Attributes.Controls }
					autoplay?={ block.Attributes.Autoplay }
					muted?={ block.Attributes.Muted }
					playsinline?={ block.Attributes.Playsinline }
					height={ fmt.Sprintf("%dpx", block.Dimensions.Height) }
					width={ fmt.Sprintf("%dpx", block.Dimensions.Width) }
				>
					<source src={ shared.Media(block.DistSource) } type={ block.ContentType }/>
				</video>
			case "audio":
				@components.AudioPlayer(id, shared.Media(block.DistSource), block.ContentType, block.Caption, block.Attributes)
			default:
				switch block.ContentType {
					case "application/pdf":
						<a class={ figureLinkStyles() } href={ templ.URL(shared.Media(block.DistSource)) }>
							<img src={ MediaSrc(block) } alt={ block.Alt }/>
						</a>
					default:
						@UnsupportedMediaTypeConsoleError(block.ContentType)
				}
		}
	</figure>
}

css linkBlockDomain() {
	font-family: Inconsolata, monospace;
	font-weight: 500;
	font-size: 0.8em;
	opacity: 0.7;
	line-height: 1;
}

css linkBlockText() {
	line-height: 1;
}

css linkBlockContent() {
	display: flex;
	flex-direction: column;
	justify-content: center;
	row-gap: 0.25em;
}

templ LinkBlock(block ortfodb.Link) {
	@components.ArrowLink(block.URL, linkBlockLinkStyle()) {
		<div class={ linkBlockContent() }>
			<span class={ linkBlockText() }>
				@shared.HTML(block.Text)
			</span>
			<div class={ linkBlockDomain() }>{ shared.DomainOfURL(block.URL) }</div>
		</div>
	}
}

css tagLink() {
	display: inline-flex;
	padding: 0.2em 0.5em;
	text-decoration: none;
	align-items: center;
	column-gap: 0.25ch;
	opacity: 0.7;
}

css tagLinks() {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
}

css hashtag() {
	font-family: Inconsolata, monospace;
	font-weight: 500;
	font-size: 1.5em;
}

css contentSectionStyles() {
	display: grid;
	gap: 2em;
	margin: 2rem auto;
	max-width: 1200px;
	padding: 0 1rem;
}

css blockStyles() {
	background-color: var(--tertiary, white);
	color: var(--tertiary-text, black);
	display: flex;
	justify-content: center;
	border-radius: 0.5rem;
	overflow: hidden;
	min-width: 0;
	min-height: 0;
	font-size: 1.2rem;
}

css paragraphBlockStyle() {
	padding: 1rem 2rem;
}

css linkBlockLinkStyle() {
	padding: 1rem 2rem;
	width: 100%;
	display: flex;
	justify-content: center;
	align-items: center;
	text-decoration: none;
}

css figureLinkStyles() {
	display: flex;
}

css figureStyles() {
	display: flex;
	flex-direction: column;
	margin: 0;
	width: 100%;
	max-width: 75vh;
}

css figureCaptionStyles() {
	display: flex;
	justify-content: center;
	align-items: center;
	flex-grow: 1;
	padding: 1rem 2rem;
	font-size: 1rem;
}

css imageStyles() {
	width: 100%;
	height: auto;
}

css regularSectionWhiteBackground() {
	box-sizing: border-box;
	padding: 4rem;
	border-radius: 1rem;
	background-color: white;
	color: black;
	max-width: 600px;
	margin: 5rem auto 2rem;
}

css madeWithTechnologiesList() {
	display: flex;
	flex-wrap: wrap;
	column-gap: 2rem;
	row-gap: 1rem;
	padding: 0;
	justify-content: center;
}

css madeWithTechnology() {
	display: flex;
	flex-direction: column;
	align-items: center;
	border-radius: 2rem;
}

css madeWithTechnologyLogo() {
	height: 5rem;
	margin-bottom: 1em;
}

css madeWithTechnologyDescription() {
	font-size: 0.8em;
	opacity: 0.75;
	display: block;
	max-width: 10rem;
	max-height: 5rem;
	overflow: hidden;
	text-overflow: ellipsis;
}

css standardWorkSection() {
	display: flex;
	flex-direction: column;
	align-items: center;
}

css listItemNoBullet() {
	list-style-type: none;
	padding: 0;
}

// formatDuration formats a duration in a human-readable way using plain words, depending on the language given (fr or en)
// it handles plurals and singulars, and does not using any words higher than days
func formatDuration(duration time.Duration, lang string) string {
	var days, hours, minutes int
	if duration.Hours() > 24 {
		days = int(duration.Hours() / 24)
		duration -= time.Duration(days) * 24 * time.Hour
	}
	if duration.Hours() > 1 {
		hours = int(duration.Hours())
		duration -= time.Duration(hours) * time.Hour
	}
	if duration.Minutes() > 1 {
		minutes = int(duration.Minutes())
		duration -= time.Duration(minutes) * time.Minute
	}

	pluralize := func(word string, count int, lang string) string {
		switch word {
		case "day":
			switch lang {
			case "fr":
				if count > 1 {
					return "jours"
				} else {
					return "jour"
				}
			default:
				if count > 1 {
					return "days"
				} else {
					return "day"
				}
			}
		case "hour":
			switch lang {
			case "fr":
				if count > 1 {
					return "heures"
				} else {
					return "heure"
				}
			default:
				if count > 1 {
					return "hours"
				} else {
					return "hour"
				}
			}
		case "minute":
			if count > 1 {
				return "minutes"
			} else {
				return "minute"
			}
		default:
			return word
		}
	}

	var parts []string
	if days > 0 {
		parts = append(parts, fmt.Sprintf("%d %s", days, pluralize("day", days, lang)))
	}
	if hours > 0 {
		parts = append(parts, fmt.Sprintf("%d %s", hours, pluralize("hour", hours, lang)))
	}
	if minutes > 0 && days == 0 {
		parts = append(parts, fmt.Sprintf("%d %s", minutes, pluralize("minute", minutes, lang)))
	}

	return strings.Join(parts, " ")
}

templ Work(work ortfodb.AnalyzedWork, tags []shared.Tag, techs []shared.Technology, collections []shared.Collection, lang string) {
	@components.IntroWith(
		shared.FormatDate(work.Metadata.CreatedAt(), "January 2006", lang), 
		work.Content[lang].Title.String(),
		false,
	) {
		@shared.OnHover(tagLink(), shared.Declarations{
			"opacity":     "1",
		})
		<section class={ tagLinks() }>
			for _, tag := range tags {
				// Letting the "music" tag would create a duplicate w/ the collection
				if tag.URLName() != "music" {
					<a class={ tagLink() } href={ templ.URL("/" + tag.URLName()) }>
						<span class={ hashtag() }>#</span><i18n>{ tag.Singular }</i18n>
					</a>
				}
			}
			for _, c := range collections {
				<a class={ tagLink() } href={ templ.URL("/" + c.ID) }>
					<span class={ hashtag() }>#</span>{ c.Title[lang] }
				</a>
			}
		</section>
	}
	<main>
		@shared.CSS(shared.Merge(colorVariables(work, lang), gridAreas(work.Content[lang].Layout)))
		<style>
			@media (max-width: 600px) {
				section.content {
					display: flex;
					flex-direction: column;
					gap: 2rem;
				}
			}
		</style>
		<section class={ contentSectionStyles(), "content" }>
			for _, block := range work.Content[lang].Blocks {
				<div
					class={ blockStyles(), templ.KV(paragraphBlockStyle(), block.Type.IsParagraph()) }
					data-block={ block.ID }
					if block.Anchor != "" {
						id={ block.Anchor }
					}
				>
					if block.Type.IsParagraph() {
						@ParagraphBlock(block.AsParagraph())
					} else if block.Type.IsMedia() {
						@MediaBlock(block.AsMedia(), block.ID)
					} else if block.Type.IsLink() {
						@LinkBlock(block.AsLink())
					}
				</div>
			}
		</section>
		if len(work.Content[lang].Footnotes) > 0 {
			<section class={ standardWorkSection() }>
				<h2 i18n>Footnotes</h2>
				<ol>
					for ref, footnote := range work.Content[lang].Footnotes {
						<li id={ "fn:" + ref }>
							@shared.HTML(footnote)
							<sup><a href={ templ.SafeURL("#fnref:" + ref) }>â†‘</a></sup>
						</li>
					}
				</ol>
			</section>
		}
		if shared.TimeSpentOnProject(work).Hours() > 0 {
			<section class={ standardWorkSection() }>
				<h2 i18n>Time spent</h2>
				<p>{ formatDuration(shared.TimeSpentOnProject(work), lang) }</p>
			</section>
		}
		if len(techs) > 0 {
			<section class={ standardWorkSection(), regularSectionWhiteBackground() }>
				<h2 i18n>made with</h2>
				<ul class={ madeWithTechnologiesList() }>
					for _, tool := range techs {
						<li class={ listItemNoBullet() }>
							@components.SimpleLink("/using/" + tool.Slug, madeWithTechnology()) {
								<img class={ madeWithTechnologyLogo() } src={ shared.Asset(fmt.Sprintf("logos/%s.svg", tool.Slug)) }/>
								{ tool.Name }
								// <div class={ madeWithTechnologyDescription() } i18n>
								// 	@shared.HTML(tool.Description)
								// </div>
							}
						</li>
					}
				</ul>
			</section>
		}
	</main>
}
